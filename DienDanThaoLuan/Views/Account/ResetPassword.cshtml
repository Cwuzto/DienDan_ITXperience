@model DienDanThaoLuan.Models.ResetPasswordViewModel
@{
    Layout = null;
}
<!DOCTYPE html>

<html>
<head>
    <title>Đổi mật khẩu</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <link href="https://fonts.googleapis.com/css?family=Lato:300,400,700&display=swap" rel="stylesheet">

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="~/Content/registerFormStyle.css?v=1">
</head>
<body>
    <style type="text/css">
        /* Snowflake effect */
        .snowflakes {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            overflow: hidden;
            z-index: 9999;
        }

        .snowflake {
            position: absolute;
            top: -50px;
            font-size: 2em;
            color: white;
            animation: fall linear infinite;
        }

        /* Random positions and speeds */
        @@keyframes fall {
            0% {
                transform: translateY(0);
                opacity: 1;
            }

            100% {
                transform: translateY(100vh);
                opacity: 0.5;
            }
        }

        .snowflake:nth-child(1) {
            left: 10%;
            animation-duration: 5s;
        }

        .snowflake:nth-child(2) {
            left: 20%;
            animation-duration: 7s;
        }

        .snowflake:nth-child(3) {
            left: 30%;
            animation-duration: 4s;
        }

        .snowflake:nth-child(4) {
            left: 40%;
            animation-duration: 6s;
        }

        .snowflake:nth-child(5) {
            left: 50%;
            animation-duration: 8s;
        }

        .snowflake:nth-child(6) {
            left: 60%;
            animation-duration: 5s;
        }

        .snowflake:nth-child(7) {
            left: 70%;
            animation-duration: 7s;
        }

        .snowflake:nth-child(8) {
            left: 80%;
            animation-duration: 4s;
        }

        .snowflake:nth-child(9) {
            left: 90%;
            animation-duration: 6s;
        }

        .snowflake:nth-child(10) {
            left: 100%;
            animation-duration: 8s;
        }

        #password-strength-container {
            transform: scaleY(0);
            transform-origin: top;
            transition: transform 0.3s ease;
            height: 8px; /* Giữ đúng chiều cao progress bar */
            overflow: hidden;
        }

            #password-strength-container.show {
                transform: scaleY(1);
            }

        #password-strength-bar {
            transition: width 0.3s ease, background-color 0.3s ease;
        }

        #overlayMessage {
            display: none;
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            width: 100%;
            height: 100%;
            background: rgb(255 255 255 / 50%);
            z-index: 999;
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 8px;
            color: rgba(4, 4, 4, 0.2)
        }

        .custom-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 36px;
            height: 36px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        .overlay-content {
            position: absolute;
            text-align: center;
            top: 320px;
            height: 180px;
            padding: 20px 30px;
            background-color: #fbceb5 !important;
            border-radius: 10px;
        }
        #overlayText {
            font-size: 20px;
            font-weight: bold;
            position: relative;
            top: 50%;
        }
        .text-error {
            color: red;
        }

        .text-success {
            color: green;
        }
        custom-spinner {
            border: 8px solid #f3f3f3;
            border-top: 8px solid #3498db;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
            margin: auto;
            position: relative;
            top: 20px;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

    </style>
    <div class="snowflakes" aria-hidden="true">
        <div class="snowflake">❅</div>
        <div class="snowflake">❅</div>
        <div class="snowflake">❆</div>
        <div class="snowflake">❄</div>
        <div class="snowflake">❅</div>
        <div class="snowflake">❆</div>
        <div class="snowflake">❄</div>
        <div class="snowflake">❅</div>
        <div class="snowflake">❆</div>
        <div class="snowflake">❄</div>
    </div>
    <section class="ftco-section">
        <a href="@Url.Action("Index","Home")" style="font-weight: bold; font-size: 20px; color: lightgrey; position: relative;">Quay lại trang chủ</a>
        <div class="container">
            <div class="row justify-content-center" style="align-items: center; height: 100vh; ">
                <div class="col-md-6 col-lg-4">
                    <div class="login-wrap p-0">
                        <h3 class="mb-3 text-center">Reset Password</h3>
                        <form id="ResetPasswordForm">

                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(m => m.Email, new { @id = "email" })
                            @Html.HiddenFor(m => m.Token, new { @id = "token" })

                            <div class="form-group">
                                @Html.PasswordFor(m => m.NewPassword, new { @class = "form-control", @id = "password-field", @placeholder = "New Password", required = "required"})
                                <span toggle="#password-field" class="fa fa-fw fa-eye field-icon toggle-password"></span>
                                <div id="password-strength-container" class="progress mt-sm-1">
                                    <div id="password-strength-bar" class="progress-bar bg-danger" role="progressbar" style="width: 0%"></div>
                                </div>
                                @Html.ValidationMessageFor(model => model.NewPassword, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", @id = "confirm-password-field", @placeholder = "Confirm Password", required = "required" })
                                <span toggle="#confirm-password-field" class="fa fa-fw fa-eye field-icon toggle-password"></span>
                                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                            </div>

                            <p style="color: yellow; font-size:16px" id="error-message"></p>

                            <div class="form-group">
                                <button type="submit" id="submit-button" class="form-control btn btn-primary submit-button px-3">Reset Password</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <div id="overlayMessage" style="display:none;">
        <div class="overlay-content">
            <div class="custom-spinner" id="loading" style="display:none;"></div>
            <h4 id="overlayText">@ViewBag.Message</h4>
            <a href="/Home/Index" id="back" style="font-size: 14px; color: darkblue; position: relative; top: 100px; display: none;">Quay lại trang chủ</a>
        </div>
    </div>
    <script src="js/jquery.min.js"></script>
    <script src="js/popper.js"></script>
    <script src="js/bootstrap.min.js"></script>
    <script src="js/main.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            // Khi nhấp vào icon span
            $(".toggle-password").click(function () {
                // Lấy input field liên kết với biểu tượng
                var input = $($(this).attr("toggle"));

                // Thay đổi thuộc tính type giữa 'password' và 'text'
                if (input.attr("type") === "password") {
                    input.attr("type", "text");
                    $(this).removeClass("fa-eye").addClass("fa-eye-slash"); // Đổi icon thành icon ẩn mật khẩu
                } else {
                    input.attr("type", "password");
                    $(this).removeClass("fa-eye-slash").addClass("fa-eye"); // Đổi icon thành icon hiển thị mật khẩu
                }
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const passwordField = document.getElementById('password-field');
            const strengthContainer = document.getElementById('password-strength-container');
            const strengthBar = document.getElementById('password-strength-bar');
            const submitButton = document.getElementById('submit-button'); // Nút đăng ký

            passwordField.addEventListener('input', function () {
                const password = passwordField.value;

                // Nếu người dùng có nhập, hiện progress

                if (password.length > 0) {
                    strengthContainer.classList.add('show');
                } else {
                    strengthContainer.classList.remove('show');
                    strengthBar.style.width = '0%';
                    strengthBar.className = 'progress-bar bg-danger';
                    updateSubmitButtonState(false); // Vô hiệu hóa nút đăng ký nếu mật khẩu không đủ mạnh
                    return;
                }

                // Tính độ mạnh
                const lengthOK = password.length >= 8;
                const hasLower = /[a-z]/.test(password);
                const hasUpper = /[A-Z]/.test(password);
                const hasNumber = /[0-9]/.test(password);
                const hasSpecial = /[^a-zA-Z0-9]/.test(password);

                let score = 0;
                if (lengthOK) score++;
                if (hasLower) score++;
                if (hasUpper) score++;
                if (hasNumber) score++;
                if (hasSpecial) score++;

                let color = "bg-danger";
                let width = "20%";

                if (score === 2) {
                    color = "bg-warning";
                    width = "40%";
                } else if (score === 3) {
                    color = "bg-info";
                    width = "60%";
                } else if (score === 4) {
                    color = "#007bff";
                    width = "80%";
                } else if (score === 5) {
                    color = "bg-success";
                    width = "100%";
                }

                strengthBar.className = `progress-bar ${color}`;
                strengthBar.style.width = width;
                // Kiểm tra nếu mật khẩu đủ mạnh (từ 100% trở lên)
                if (score >= 5) {
                    updateSubmitButtonState(true); // Cho phép nút đăng ký khi mật khẩu đủ mạnh
                } else {
                    updateSubmitButtonState(false); // Vô hiệu hóa nút đăng ký nếu mật khẩu yếu
                }
            });
            // Cập nhật trạng thái nút đăng ký
            function updateSubmitButtonState(enabled) {
                if (enabled) {
                    submitButton.disabled = false;
                    submitButton.style.cursor = 'pointer'; // Thêm kiểu con trỏ để rõ ràng
                } else {
                    submitButton.disabled = true;
                    submitButton.style.cursor = 'not-allowed'; // Thêm kiểu con trỏ khi vô hiệu hóa
                }
            }
        });
        
        $(document).ready(function () {
            
            // Khi submit form
            $('#ResetPasswordForm').submit(function (e) {
                e.preventDefault();
                $("#overlayMessage").show();
                $("#loading").show();
                $("#back").hide();
                var formData = $(this).serialize();
                
                $.ajax({
                    url: '@Url.Action("ResetPassword", "Account")',
                    type: 'POST',
                    data: formData,
                    success: function (response) {
                        $("#loading").hide();
                        if (response.success) {
                            $("#back").show();
                            $("#ResetPasswordForm").hide(); // ẩn form
                            $("#overlayText").addClass("text-success");
                            $("#overlayText").text(response.message);
                        }
                        else {
                            $("#overlayMessage").hide();
                            $("#error-message").text(response.message);
                        }
                    },
                    error: function () {
                        $("#error-message").text("Đã xảy ra lỗi. Vui lòng thử lại!");
                        $("#overlayMessage").hide();
                        $("#loading").hide();
                    }
                });
            });
            var message = "@ViewBag.Message".toLowerCase();
            console.log("@ViewBag.Message");
            if (message.includes("hết hạn")) {
                $("#ResetPasswordForm").hide(); // ẩn form
                $("#overlayMessage").fadeIn();   // hiện overlay
                $("#overlayText").addClass("text-error");
            };
        });
    </script>

</body>
</html>